// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface HJPhotoPickerResult ()
+(HJPhotoPickerResult*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@interface HJPhotoAsset ()
+(HJPhotoAsset*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@interface HJPhotoPickerOptions ()
+(HJPhotoPickerOptions*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation HJPhotoPickerResult
+(HJPhotoPickerResult*)fromMap:(NSDictionary*)dict {
  HJPhotoPickerResult* result = [[HJPhotoPickerResult alloc] init];
  result.assets = dict[@"assets"];
    if ((NSNull *)result.assets == [NSNull null]) {
        NSMutableArray *assets = [NSMutableArray new];
        [dict[@"assets"] enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
            [assets addObject:[HJPhotoAsset fromMap:obj]];
        }];
        result.assets = assets;
    } else {
        result.assets = nil;
    }
  return result;
}
-(NSDictionary*)toMap {
    NSMutableArray *assets = [NSMutableArray new];
    [self.assets enumerateObjectsUsingBlock:^(HJPhotoAsset *obj, NSUInteger idx, BOOL * _Nonnull stop) {
        [assets addObject:[obj toMap]];
    }];
    return @{ @"assets": assets };
}
@end

@implementation HJPhotoAsset
+ (HJPhotoAsset *)fromMap:(NSDictionary *)dict {
    HJPhotoAsset *result = [HJPhotoAsset new];
    result.filePath = dict[@"filePath"];
    return result;
}
- (NSDictionary *)toMap {
    return @{
        @"filePath": self.filePath ?: [NSNull null],
        @"width": self.width ?: [NSNull null],
        @"height": self.height ?: [NSNull null]
    };
}

@end

@implementation HJPhotoPickerOptions
+(HJPhotoPickerOptions*)fromMap:(NSDictionary*)dict {
    HJPhotoPickerOptions* result = [[HJPhotoPickerOptions alloc] init];
    result.type = dict[@"type"];
    if ((NSNull *)result.type == [NSNull null]) {
      result.type = nil;
    }
    result.maxAssetsCount = dict[@"maxAssetsCount"];
    if ((NSNull *)result.maxAssetsCount == [NSNull null]) {
      result.maxAssetsCount = nil;
    }
    result.allowEdit = dict[@"allowEdit"];
    if ((NSNull *)result.allowEdit == [NSNull null]) {
      result.allowEdit = nil;
    }
    result.singleJumpEdit = dict[@"singleJumpEdit"];
    if ((NSNull *)result.singleJumpEdit == [NSNull null]) {
      result.singleJumpEdit = nil;
    }
    result.isRoundCliping = dict[@"isRoundCliping"];
    if ((NSNull *)result.isRoundCliping == [NSNull null]) {
      result.isRoundCliping = nil;
    }
    result.photoEditCustomRatioW = dict[@"photoEditCustomRatioW"];
    if ((NSNull *)result.photoEditCustomRatioW == [NSNull null]) {
      result.photoEditCustomRatioW = nil;
    }
    result.photoEditCustomRatioH = dict[@"photoEditCustomRatioH"];
    if ((NSNull *)result.photoEditCustomRatioH == [NSNull null]) {
      result.photoEditCustomRatioH = nil;
    }
    result.imageSpanCount = dict[@"imageSpanCount"];
    if ((NSNull *)result.imageSpanCount == [NSNull null]) {
      result.imageSpanCount = nil;
    }
    result.allowOpenCamera = dict[@"allowOpenCamera"];
    if ((NSNull *)result.allowOpenCamera == [NSNull null]) {
      result.allowOpenCamera = nil;
    }
    result.allowGif = dict[@"allowGif"];
    if ((NSNull *)result.allowGif == [NSNull null]) {
      result.allowGif = nil;
    }
    result.videoMaximumDuration = dict[@"videoMaximumDuration"];
    if ((NSNull *)result.videoMaximumDuration == [NSNull null]) {
      result.videoMaximumDuration = nil;
    }
    result.videoMinimumDuration = dict[@"videoMinimumDuration"];
    if ((NSNull *)result.videoMinimumDuration == [NSNull null]) {
      result.videoMinimumDuration = nil;
    }
  return result;
}
-(NSDictionary*)toMap {
    return @{
        @"type": (self.type ? self.type : [NSNull null]),
        @"maxAssetsCount": (self.maxAssetsCount ? self.maxAssetsCount : [NSNull null]),
        @"allowEdit": (self.allowEdit ? self.allowEdit : [NSNull null]),
        @"singleJumpEdit": (self.singleJumpEdit ? self.singleJumpEdit : [NSNull null]),
        @"isRoundCliping": (self.isRoundCliping ? self.isRoundCliping : [NSNull null]),
        @"photoEditCustomRatioW": (self.photoEditCustomRatioW ? self.photoEditCustomRatioW : [NSNull null]),
        @"photoEditCustomRatioH": (self.photoEditCustomRatioH ? self.photoEditCustomRatioH : [NSNull null]),
        @"imageSpanCount": (self.imageSpanCount ? self.imageSpanCount : [NSNull null]),
        @"allowOpenCamera": (self.allowOpenCamera ? self.allowOpenCamera : [NSNull null]),
        @"allowGif": (self.allowGif ? self.allowGif : [NSNull null]),
        @"imageSpanCount": (self.imageSpanCount ? self.imageSpanCount : [NSNull null]),
        @"videoMaximumDuration": (self.videoMaximumDuration ? self.videoMaximumDuration : [NSNull null]),
        @"videoMinimumDuration": (self.videoMinimumDuration ? self.videoMinimumDuration : [NSNull null]),
    };
}
@end

void HJPhotoPickerSetup(id<FlutterBinaryMessenger> binaryMessenger, id<HJPhotoPicker> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PhotoPicker.pickPhoto"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        HJPhotoPickerOptions *input = [HJPhotoPickerOptions fromMap:message];
        [api pickPhoto:input completion:^(HJPhotoPickerResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
