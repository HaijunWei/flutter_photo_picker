// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface HJPhotoPickerResult ()
+(HJPhotoPickerResult*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface HJPhotoPickerOptions ()
+(HJPhotoPickerOptions*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation HJPhotoPickerResult
+(HJPhotoPickerResult*)fromMap:(NSDictionary*)dict {
  HJPhotoPickerResult* result = [[HJPhotoPickerResult alloc] init];
  result.assets = dict[@"assets"];
  if ((NSNull *)result.assets == [NSNull null]) {
    result.assets = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.assets ? self.assets : [NSNull null]), @"assets", nil];
}
@end

@implementation HJPhotoPickerOptions
+(HJPhotoPickerOptions*)fromMap:(NSDictionary*)dict {
  HJPhotoPickerOptions* result = [[HJPhotoPickerOptions alloc] init];
  result.type = dict[@"type"];
  if ((NSNull *)result.type == [NSNull null]) {
    result.type = nil;
  }
  result.maxAssetsCount = dict[@"maxAssetsCount"];
  if ((NSNull *)result.maxAssetsCount == [NSNull null]) {
    result.maxAssetsCount = nil;
  }
  result.allowEdit = dict[@"allowEdit"];
  if ((NSNull *)result.allowEdit == [NSNull null]) {
    result.allowEdit = nil;
  }
  result.videoMaximumDuration = dict[@"videoMaximumDuration"];
  if ((NSNull *)result.videoMaximumDuration == [NSNull null]) {
    result.videoMaximumDuration = nil;
  }
  result.videoMinimumDuration = dict[@"videoMinimumDuration"];
  if ((NSNull *)result.videoMinimumDuration == [NSNull null]) {
    result.videoMinimumDuration = nil;
  }
  result.singleJumpEdit = dict[@"singleJumpEdit"];
  if ((NSNull *)result.singleJumpEdit == [NSNull null]) {
    result.singleJumpEdit = nil;
  }
  result.isRoundCliping = dict[@"isRoundCliping"];
  if ((NSNull *)result.isRoundCliping == [NSNull null]) {
    result.isRoundCliping = nil;
  }
  result.reverseDate = dict[@"reverseDate"];
  if ((NSNull *)result.reverseDate == [NSNull null]) {
    result.reverseDate = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.type ? self.type : [NSNull null]), @"type", (self.maxAssetsCount ? self.maxAssetsCount : [NSNull null]), @"maxAssetsCount", (self.allowEdit ? self.allowEdit : [NSNull null]), @"allowEdit", (self.videoMaximumDuration ? self.videoMaximumDuration : [NSNull null]), @"videoMaximumDuration", (self.videoMinimumDuration ? self.videoMinimumDuration : [NSNull null]), @"videoMinimumDuration", (self.singleJumpEdit ? self.singleJumpEdit : [NSNull null]), @"singleJumpEdit", (self.isRoundCliping ? self.isRoundCliping : [NSNull null]), @"isRoundCliping", (self.reverseDate ? self.reverseDate : [NSNull null]), @"reverseDate", nil];
}
@end

void HJPhotoPickerSetup(id<FlutterBinaryMessenger> binaryMessenger, id<HJPhotoPicker> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PhotoPicker.pickPhoto"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        HJPhotoPickerOptions *input = [HJPhotoPickerOptions fromMap:message];
        [api pickPhoto:input completion:^(HJPhotoPickerResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult([output toMap], error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
